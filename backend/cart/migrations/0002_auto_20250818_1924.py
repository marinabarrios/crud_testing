# Generated by Django 5.2.5 on 2025-08-18 22:24

from django.db import migrations
from decimal import Decimal
import random


def create_dummy_carts_and_orders(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Product = apps.get_model('products', 'Product')
    Cart = apps.get_model('cart', 'Cart')
    CartItem = apps.get_model('cart', 'CartItem')
    Order = apps.get_model('cart', 'Order')
    OrderItem = apps.get_model('cart', 'OrderItem')
    
    # Get users (excluding admin for some variety)
    users = list(User.objects.filter(is_superuser=False))
    products = list(Product.objects.all())
    
    if not users or not products:
        return  # Skip if no users or products exist
    
    # Create carts for some users with items
    for user in users[:5]:  # Create carts for first 5 regular users
        cart, created = Cart.objects.get_or_create(user=user)
        
        # Add random items to cart
        num_items = random.randint(1, 4)
        selected_products = random.sample(products, min(num_items, len(products)))
        
        for product in selected_products:
            quantity = random.randint(1, 3)
            CartItem.objects.get_or_create(
                cart=cart,
                product=product,
                defaults={'quantity': quantity}
            )
    
    # Create some orders for users
    order_statuses = ['pending', 'processing', 'shipped', 'delivered']
    
    for user in users[:6]:  # Create orders for first 6 users
        num_orders = random.randint(1, 3)
        
        for _ in range(num_orders):
            # Select random products for this order
            num_items = random.randint(1, 5)
            selected_products = random.sample(products, min(num_items, len(products)))
            
            # Calculate total amount
            total_amount = Decimal('0.00')
            order_items = []
            
            for product in selected_products:
                quantity = random.randint(1, 2)
                price = product.price
                total_amount += price * quantity
                order_items.append({
                    'product': product,
                    'quantity': quantity,
                    'price': price
                })
            
            # Create order
            status = random.choice(order_statuses)
            order = Order.objects.create(
                user=user,
                status=status,
                total_amount=total_amount,
                shipping_address=f"{user.profile.address}, {user.profile.city}, {user.profile.postal_code}, {user.profile.country}"
            )
            
            # Create order items
            for item_data in order_items:
                OrderItem.objects.create(
                    order=order,
                    product=item_data['product'],
                    quantity=item_data['quantity'],
                    price=item_data['price']
                )


def reverse_dummy_carts_and_orders(apps, schema_editor):
    Cart = apps.get_model('cart', 'Cart')
    CartItem = apps.get_model('cart', 'CartItem')
    Order = apps.get_model('cart', 'Order')
    OrderItem = apps.get_model('cart', 'OrderItem')
    
    # Delete all cart items, carts, order items, and orders
    CartItem.objects.all().delete()
    Cart.objects.all().delete()
    OrderItem.objects.all().delete()
    Order.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('cart', '0001_initial'),
        ('products', '0002_auto_20250818_1921'),  # Ensure products exist first
        ('users', '0002_auto_20250818_1924'),     # Ensure users exist first
    ]

    operations = [
        migrations.RunPython(create_dummy_carts_and_orders, reverse_dummy_carts_and_orders),
    ]
